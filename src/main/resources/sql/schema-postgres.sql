-- Copyright 2025 Abel Ferrer Jiménez
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- ====================================================================
-- Schema: Janus
-- Engine: PostgreSQL
-- Notes:
--  - Uses GENERATED ... AS IDENTITY for primary keys
--  - Foreign keys use ON DELETE RESTRICT for integrity
--  - Logical deletion via DELETED flags where specified
--  - WORKSHIFT_TIMELOG models a 1→N relation with TIME_LOG unique in the link
--  - Indexes only where beneficial for lookups and joins
-- ====================================================================

BEGIN;

-- Cleanup phase (drop in reverse dependency order)
DROP TABLE IF EXISTS workshift_timelog;
DROP TABLE IF EXISTS employee_worksite;
DROP TABLE IF EXISTS time_log;
DROP TABLE IF EXISTS work_shift;
DROP TABLE IF EXISTS employee;
DROP TABLE IF EXISTS worksite;
DROP TABLE IF EXISTS schedule;

-- ============================================================
-- SCHEDULE
-- Master catalog of available schedules.
-- NAME and CODE are unique identifiers.
-- ============================================================
CREATE TABLE schedule (
  id     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name   VARCHAR22(255) NOT NULL,
  code   VARCHAR2(50)  NOT NULL,
  CONSTRAINT uk_schedule_name UNIQUE (name),
  CONSTRAINT uk_schedule_code UNIQUE (code)
);

-- ============================================================
-- WORKSITE
-- Physical or virtual work locations.
-- Includes IANA time zone id and logical deletion flag.
-- ============================================================
CREATE TABLE worksite (
  id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name       VARCHAR2(255) NOT NULL,
  code       VARCHAR2(50)  NOT NULL,
  time_zone  VARCHAR2(64) NOT NULL,
  deleted    BOOLEAN NOT NULL DEFAULT FALSE,
  CONSTRAINT uk_worksite_code UNIQUE (code)
);

-- ============================================================
-- EMPLOYEE
-- Registered employees.
-- Each employee references one SCHEDULE.
-- ============================================================
CREATE TABLE employee (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name         VARCHAR2(255) NOT NULL,
  surname      VARCHAR2(255) NOT NULL,
  email        VARCHAR2(254) NOT NULL,
  schedule_id  BIGINT NOT NULL,
  CONSTRAINT uk_employee_email UNIQUE (email),
  CONSTRAINT fk_employee_schedule
    FOREIGN KEY (schedule_id) REFERENCES schedule(id) ON DELETE RESTRICT
);

-- Useful for joins between EMPLOYEE and SCHEDULE
CREATE INDEX idx_employee_schedule ON employee(schedule_id);

-- ============================================================
-- TIME_LOG
-- Individual check-in / check-out events.
-- EXIT_TIME may remain NULL until closed.
-- ============================================================
CREATE TABLE time_log (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id  BIGINT NOT NULL,
  worksite_id  BIGINT NOT NULL,
  entry_time   TIMESTAMP NOT NULL,
  exit_time    TIMESTAMP,
  deleted      BOOLEAN NOT NULL DEFAULT FALSE,
  CONSTRAINT fk_timelog_employee
    FOREIGN KEY (employee_id) REFERENCES employee(id) ON DELETE RESTRICT,
  CONSTRAINT fk_timelog_worksite
    FOREIGN KEY (worksite_id) REFERENCES worksite(id) ON DELETE RESTRICT
);

-- Indexes for frequent lookups
CREATE INDEX idx_timelog_employee ON time_log(employee_id);
CREATE INDEX idx_timelog_worksite ON time_log(worksite_id);
CREATE INDEX idx_timelog_entry    ON time_log(entry_time);
CREATE UNIQUE INDEX uk_timelog_employee_entry_time_active
  ON time_log(employee_id, entry_time)
  WHERE deleted = FALSE;

-- ============================================================
-- WORK_SHIFT
-- Daily work summary per employee.
-- Stores total work and pause durations in seconds.
-- ============================================================
CREATE TABLE work_shift (
  id                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id       BIGINT NOT NULL,
  date              DATE   NOT NULL,
  total_pause_time  BIGINT NOT NULL DEFAULT 0,  -- seconds
  total_work_time   BIGINT NOT NULL DEFAULT 0,  -- seconds
  CONSTRAINT fk_workshift_employee
    FOREIGN KEY (employee_id) REFERENCES employee(id) ON DELETE RESTRICT,
  CONSTRAINT uk_workshift_employee_date UNIQUE (employee_id, date)
);

-- Frequently used for employee-based queries
CREATE INDEX idx_workshift_employee ON work_shift(employee_id);

-- ============================================================
-- EMPLOYEE_WORKSITE
-- Many-to-many mapping of employees to allowed worksites.
-- ============================================================
CREATE TABLE employee_worksite (
  employee_id  BIGINT NOT NULL,
  worksite_id  BIGINT NOT NULL,
  CONSTRAINT pk_employee_worksite PRIMARY KEY (employee_id, worksite_id),
  CONSTRAINT fk_ew_employee
    FOREIGN KEY (employee_id) REFERENCES employee(id) ON DELETE RESTRICT,
  CONSTRAINT fk_ew_worksite
    FOREIGN KEY (worksite_id) REFERENCES worksite(id) ON DELETE RESTRICT
);

-- ============================================================
-- WORKSHIFT_TIMELOG
-- One-to-many relation between WORK_SHIFT and TIME_LOG.
-- Each TIME_LOG belongs to exactly one WORK_SHIFT.
-- ============================================================
CREATE TABLE workshift_timelog (
  workshift_id BIGINT NOT NULL,
  timelog_id   BIGINT NOT NULL,
  CONSTRAINT pk_workshift_timelog PRIMARY KEY (workshift_id, timelog_id),
  CONSTRAINT uk_workshift_timelog_tl UNIQUE (timelog_id),
  CONSTRAINT fk_wstl_workshift
    FOREIGN KEY (workshift_id) REFERENCES work_shift(id) ON DELETE RESTRICT,
  CONSTRAINT fk_wstl_timelog
    FOREIGN KEY (timelog_id)   REFERENCES time_log(id)   ON DELETE RESTRICT
);

COMMIT;
