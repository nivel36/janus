-- Copyright 2025 Abel Ferrer Jiménez
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- ====================================================================
-- Schema: Janus
-- Engine: H2 (PostgreSQL compatibility mode)
-- Notes:
--  - IDENTITY columns for primary keys
--  - Foreign keys use ON DELETE RESTRICT
--  - Logical deletion via DELETED where applicable
--  - WORKSHIFT_TIMELOG models a strict 1→N relation
--  - Targeted indexes for joins and lookups
-- ====================================================================

-- Cleanup phase (drop in reverse dependency order)
DROP TABLE IF EXISTS WORKSHIFT_TIMELOG;
DROP TABLE IF EXISTS EMPLOYEE_WORKSITE;
DROP TABLE IF EXISTS TIME_LOG;
DROP TABLE IF EXISTS WORK_SHIFT;
DROP TABLE IF EXISTS EMPLOYEE;
DROP TABLE IF EXISTS WORKSITE;
DROP TABLE IF EXISTS DAY_OF_WEEK_TIME_RANGE;
DROP TABLE IF EXISTS SCHEDULE_RULE;
DROP TABLE IF EXISTS SCHEDULE;

-- ============================================================
-- SCHEDULE
-- Master catalog of available schedules.
-- NAME and CODE are unique identifiers.
-- ============================================================
CREATE TABLE SCHEDULE (
  ID            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  NAME          VARCHAR(255) NOT NULL,
  CODE          VARCHAR(50)  NOT NULL,
  CONSTRAINT UK_SCHEDULE_NAME UNIQUE (NAME),
  CONSTRAINT UK_SCHEDULE_CODE UNIQUE (CODE)
);

-- ============================================================
-- SCHEDULE_RULE
-- Date-bounded rule sets belonging to a SCHEDULE.
-- START_DATE and END_DATE define optional validity windows.
-- ============================================================
CREATE TABLE SCHEDULE_RULE (
  ID            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  NAME          VARCHAR(255),
  SCHEDULE_ID   BIGINT NOT NULL,
  START_DATE    DATE,
  END_DATE      DATE,
  CONSTRAINT UK_SCHEDULE_RULE_NAME UNIQUE (NAME),
  CONSTRAINT FK_SCHEDULE_RULE_SCHEDULE
    FOREIGN KEY (SCHEDULE_ID) REFERENCES SCHEDULE(ID) ON DELETE RESTRICT,
  CONSTRAINT CK_SCHEDULE_RULE_DATES
    CHECK (END_DATE IS NULL OR START_DATE IS NULL OR END_DATE >= START_DATE)
);

CREATE INDEX IDX_SCHEDULE_RULE_NAME ON SCHEDULE_RULE(NAME);
CREATE INDEX IDX_SCHEDULE_RULE_SCHED_DATES ON SCHEDULE_RULE(SCHEDULE_ID, START_DATE, END_DATE);

-- ============================================================
-- DAY_OF_WEEK_TIME_RANGE
-- Weekly time windows for a given SCHEDULE_RULE.
-- One range per day per rule.
-- ============================================================
CREATE TABLE DAY_OF_WEEK_TIME_RANGE (
  ID               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  SCHEDULE_RULE_ID BIGINT NOT NULL,
  DAY_OF_WEEK      VARCHAR(16) NOT NULL,
  START_TIME       TIME NOT NULL,
  END_TIME         TIME NOT NULL,
  EFFECTIVE_WORK_HOURS VARCHAR(16) NOT NULL, 
  CONSTRAINT FK_DOWTR_RULE
    FOREIGN KEY (SCHEDULE_RULE_ID) REFERENCES SCHEDULE_RULE(ID) ON DELETE RESTRICT,
  CONSTRAINT UK_DOWTR_RULE_DAY
    UNIQUE (SCHEDULE_RULE_ID, DAY_OF_WEEK),
  CONSTRAINT CK_DOWTR_DAY
    CHECK (DAY_OF_WEEK IN ('MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY','SUNDAY')),
  CONSTRAINT CK_DOWTR_TIME_ORDER
    CHECK (END_TIME > START_TIME)
);

CREATE INDEX IDX_DOWTR_DOW ON DAY_OF_WEEK_TIME_RANGE(DAY_OF_WEEK);
CREATE INDEX IDX_DOWTR_RULE ON DAY_OF_WEEK_TIME_RANGE(SCHEDULE_RULE_ID);

-- ============================================================
-- WORKSITE
-- Physical or virtual work locations with an IANA time zone.
-- Logical deletion supported via DELETED flag.
-- ============================================================
CREATE TABLE WORKSITE (
  ID            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  NAME          VARCHAR(255) NOT NULL,
  CODE          VARCHAR(50)  NOT NULL,
  TIME_ZONE     VARCHAR(64)  NOT NULL,
  DELETED       BOOLEAN NOT NULL DEFAULT FALSE,
  CONSTRAINT UK_WORKSITE_CODE UNIQUE (CODE)
);

-- ============================================================
-- EMPLOYEE
-- Registered employees. Each one is assigned a SCHEDULE.
-- ============================================================
CREATE TABLE EMPLOYEE (
  ID            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  NAME          VARCHAR(255) NOT NULL,
  SURNAME       VARCHAR(255) NOT NULL,
  EMAIL         VARCHAR(254) NOT NULL,
  SCHEDULE_ID   BIGINT NOT NULL,
  CONSTRAINT UK_EMPLOYEE_EMAIL UNIQUE (EMAIL),
  CONSTRAINT FK_EMPLOYEE_SCHEDULE
    FOREIGN KEY (SCHEDULE_ID) REFERENCES SCHEDULE(ID) ON DELETE RESTRICT
);

-- Indexes for joins
CREATE INDEX IDX_EMPLOYEE_SCHEDULE ON EMPLOYEE(SCHEDULE_ID);
CREATE INDEX IDX_EMPLOYEE_EMAIL ON EMPLOYEE(EMAIL);

-- ============================================================
-- TIME_LOG
-- Individual check-in / check-out events.
-- EXIT_TIME remains NULL until the log is closed.
-- ============================================================
CREATE TABLE TIME_LOG (
  ID            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  EMPLOYEE_ID   BIGINT NOT NULL,
  WORKSITE_ID   BIGINT NOT NULL,
  ENTRY_TIME    TIMESTAMP NOT NULL,
  EXIT_TIME     TIMESTAMP,
  DELETED       BOOLEAN NOT NULL DEFAULT FALSE,
  CONSTRAINT FK_TIMELOG_EMPLOYEE
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE(ID) ON DELETE RESTRICT,
  CONSTRAINT FK_TIMELOG_WORKSITE
    FOREIGN KEY (WORKSITE_ID) REFERENCES WORKSITE(ID) ON DELETE RESTRICT,
  CONSTRAINT CK_TIMELOG_TIME_ORDER
    CHECK (EXIT_TIME IS NULL OR EXIT_TIME > ENTRY_TIME)
);

-- Indexes for frequent lookups
CREATE INDEX IDX_TIMELOG_EMPLOYEE ON TIME_LOG(EMPLOYEE_ID);
CREATE INDEX IDX_TIMELOG_WORKSITE ON TIME_LOG(WORKSITE_ID);
CREATE INDEX IDX_TIMELOG_ENTRY ON TIME_LOG(ENTRY_TIME);
CREATE INDEX IDX_TIMELOG_EMP_ENTRY ON TIME_LOG(EMPLOYEE_ID, ENTRY_TIME);

-- ============================================================
-- WORK_SHIFT
-- Daily aggregate per employee. Durations stored in seconds.
-- Unique by EMPLOYEE_ID + DATE.
-- ============================================================
CREATE TABLE WORK_SHIFT (
  ID                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  EMPLOYEE_ID        BIGINT NOT NULL,
  DATE               DATE   NOT NULL,
  TOTAL_PAUSE_TIME   VARCHAR(16) NOT NULL,
  TOTAL_WORK_TIME    VARCHAR(16) NOT NULL,
  CONSTRAINT FK_WORKSHIFT_EMPLOYEE
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE(ID) ON DELETE RESTRICT,
  CONSTRAINT UK_WORKSHIFT_EMPLOYEE_DATE UNIQUE (EMPLOYEE_ID, DATE),
  CONSTRAINT CK_WORKSHIFT_DURATIONS
    CHECK (TOTAL_PAUSE_TIME >= 0 AND TOTAL_WORK_TIME >= 0)
);

CREATE INDEX IDX_WORKSHIFT_EMPLOYEE ON WORK_SHIFT(EMPLOYEE_ID);

-- ============================================================
-- EMPLOYEE_WORKSITE
-- Allowed worksites per employee (many-to-many).
-- ============================================================
CREATE TABLE EMPLOYEE_WORKSITE (
  EMPLOYEE_ID  BIGINT NOT NULL,
  WORKSITE_ID  BIGINT NOT NULL,
  CONSTRAINT PK_EMPLOYEE_WORKSITE PRIMARY KEY (EMPLOYEE_ID, WORKSITE_ID),
  CONSTRAINT FK_EW_EMPLOYEE
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE(ID) ON DELETE RESTRICT,
  CONSTRAINT FK_EW_WORKSITE
    FOREIGN KEY (WORKSITE_ID) REFERENCES WORKSITE(ID) ON DELETE RESTRICT
);

CREATE INDEX IDX_EW_EMPLOYEE ON EMPLOYEE_WORKSITE(EMPLOYEE_ID);
CREATE INDEX IDX_EW_WORKSITE ON EMPLOYEE_WORKSITE(WORKSITE_ID);

-- ============================================================
-- WORKSHIFT_TIMELOG
-- 1→N relation between WORK_SHIFT and TIME_LOG.
-- Each TIME_LOG belongs to exactly one WORK_SHIFT.
-- ============================================================
CREATE TABLE WORKSHIFT_TIMELOG (
  WORKSHIFT_ID BIGINT NOT NULL,
  TIMELOG_ID   BIGINT NOT NULL,
  CONSTRAINT PK_WORKSHIFT_TIMELOG PRIMARY KEY (WORKSHIFT_ID, TIMELOG_ID),
  CONSTRAINT UK_WORKSHIFT_TIMELOG_TL UNIQUE (TIMELOG_ID),
  CONSTRAINT FK_WSTL_WORKSHIFT
    FOREIGN KEY (WORKSHIFT_ID) REFERENCES WORK_SHIFT(ID) ON DELETE RESTRICT,
  CONSTRAINT FK_WSTL_TIMELOG
    FOREIGN KEY (TIMELOG_ID)   REFERENCES TIME_LOG(ID)   ON DELETE RESTRICT
);
